name: Frontend CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

env:
  FRONTEND_DIR: frontend
  BACKEND_URL: https://wazifni-backend.onrender.com
  FRONTEND_EXPECTED: https://wazifni-frontend.vercel.app

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.FRONTEND_DIR }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install
        run: npm ci

      - name: Lint (if script exists)
        run: |
          if npm run | grep -qE "^\s*lint\s"; then npm run lint; else echo "no lint script"; fi

      - name: Typecheck (if script exists)
        run: |
          if npm run | grep -qE "^\s*typecheck\s"; then npm run typecheck; else echo "no typecheck script"; fi

      - name: Unit tests (if present)
        run: |
          if npm run | grep -qE "^\s*test\s"; then npm test -- --ci || npm test || true; else echo "no tests"; fi

      - name: Build
        env:
          VITE_API_BASE: ${{ env.BACKEND_URL }}
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.FRONTEND_DIR }}/dist

  report:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install requests
        run: python -m pip install --upgrade pip && pip install requests

      - name: Generate Frontend Report
        env:
          BACKEND_URL: ${{ env.BACKEND_URL }}
          FRONTEND_URL: ${{ env.FRONTEND_EXPECTED }}
          REPORT_EMAIL: ${{ secrets.REPORT_EMAIL }}
          REPORT_PASSWORD: ${{ secrets.REPORT_PASSWORD }}
        run: |
          python - <<'PY'
          import os, requests

          be = os.getenv("BACKEND_URL","").rstrip("/")
          fe = os.getenv("FRONTEND_URL","").rstrip("/")
          email = os.getenv("REPORT_EMAIL","")
          pwd   = os.getenv("REPORT_PASSWORD","")

          def call(m,u,**k):
              try:
                  r = requests.request(m,u,timeout=20,**k); return r
              except Exception:
                  return None

          # Backend checks
          openapi = call("GET", f"{be}/openapi.json")
          openapi_ok = bool(openapi and openapi.ok and "paths" in openapi.json())
          health = call("GET", f"{be}/health")
          health_ok = bool(health and health.ok)

          token=None; jobs_status=None; jobs_count=None
          if email and pwd:
              call("POST", f"{be}/auth/register", json={"email":email,"password":pwd,"name":"CI Frontend"})
              login = call("POST", f"{be}/auth/login", data={"username":email,"password":pwd})
              if login and login.ok:
                  token = login.json().get("access_token")

          if token:
              j = call("GET", f"{be}/jobs", headers={"Authorization":f"Bearer {token}"})
              jobs_status = j.status_code if j else None
              try: jobs_count = len(j.json()) if j and j.ok else None
              except: jobs_count=None

          # CORS
          pre_ok=simple_ok=None; acao_pre=acao_simple=None
          if fe:
              pre = call("OPTIONS", f"{be}/jobs", headers={"Origin":fe,"Access-Control-Request-Method":"GET"})
              if pre:
                  acao_pre = pre.headers.get("Access-Control-Allow-Origin")
                  pre_ok = (acao_pre in (fe,"*"))
              sim = call("GET", f"{be}/jobs", headers={"Origin":fe})
              if sim:
                  acao_simple = sim.headers.get("Access-Control-Allow-Origin")
                  simple_ok = (acao_simple in (fe,"*"))

          go = all([
              openapi_ok,
              health_ok if health is not None else True,
              (jobs_status==200) if jobs_status is not None else True,
              (pre_ok is None or pre_ok) and (simple_ok is None or simple_ok),
          ])

          report = f"""# Frontend Release Report — CI Autogen

**Backend:** {be}
**Expected Frontend URL:** {fe or "(not set)"}

## Verification Matrix
- Backend OpenAPI: **{getattr(openapi,'status_code',None)}** → OK: **{openapi_ok}**
- Backend Health: **{getattr(health,'status_code',None)}** → OK: **{health_ok}**
- Jobs: **{jobs_status}** (count: **{jobs_count}**)
- CORS preflight OK: **{pre_ok}** (ACAO: {acao_pre})
- CORS simple OK: **{simple_ok}** (ACAO: {acao_simple})

## Result
{"✅ GO — all checks passed." if go else "❌ NO-GO — see failures above."}
"""
          with open("FrontendReport.md","w",encoding="utf-8") as f:
              f.write(report)
          print(report)
          PY

      - name: Upload Frontend Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: FrontendReport
          path: FrontendReport.md
          if-no-files-found: error

  deploy-vercel:
    needs: [build-test, report]
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')
      && secrets.VERCEL_TOKEN != ''
      && secrets.VERCEL_ORG_ID != ''
      && secrets.VERCEL_PROJECT_ID != ''
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.FRONTEND_DIR }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Vercel (Preview on PR, Prod on main)
        id: vercel
        uses: amondnet/vercel-action@v25
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ${{ env.FRONTEND_DIR }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}
      - name: Echo deployed URL
        run: echo "Deployed URL: ${{ steps.vercel.outputs.preview-url }}"

  comment-report:
    needs: report
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Download FrontendReport artifact
        uses: actions/download-artifact@v4
        with:
          name: FrontendReport
          path: .
      - name: Post Frontend Report as PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: FrontendReport.md
