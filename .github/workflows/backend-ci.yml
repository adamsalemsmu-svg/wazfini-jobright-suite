name: Backend CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    name: backend:build-test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            backend/requirements.txt

      - name: Install dependencies
        run: |
          pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint
        run: |
          if python -m pip show flake8 > /dev/null 2>&1; then
            flake8 .
          else
            echo "flake8 not installed"
          fi

      - name: Run tests (if pytest present)
        env:
          DATABASE_URL: sqlite+aiosqlite:///./test.db
        run: |
          if python -m pip show pytest > /dev/null 2>&1; then
            pytest -q || true
          else
            echo "pytest not installed"
          fi

  smoke:
    name: backend:smoke
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install requests
        run: pip install requests

      - name: Health check
        env:
          BACKEND_URL: ${{ secrets.FRONTEND_BACKEND_URL }}
        run: |
          python - <<'PY'
          import os, requests, sys
          url = (os.environ.get("BACKEND_URL") or "").rstrip("/")
          if not url:
              print("No BACKEND_URL set; skipping.")
              sys.exit(0)
          ok = True
          for path in ("/health", "/openapi.json"):
              try:
                  r = requests.get(url + path, timeout=20)
                  print(path, r.status_code)
                  if not r.ok: ok = False
              except Exception as e:
                  print("Error on", path, e)
                  ok = False
          sys.exit(0 if ok else 1)
          PY

  deploy-render:
    name: backend:deploy
    needs: [build-test, smoke]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && secrets.RENDER_API_KEY != '' && secrets.RENDER_SERVICE_ID != '' }}
    steps:
      - name: Trigger Render deploy
        run: |
          curl -fsS -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys
