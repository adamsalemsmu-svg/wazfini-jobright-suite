name: Backend CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    name: backend:build-test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt

      - name: Install deps
        run: |
          pip install -U pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install -r requirements.txt
          # If your project uses alembic, install it via requirements.

      - name: Lint (if flake8 present)
        run: |
          if python -c "import pkgutil; exit(0 if pkgutil.find_loader('flake8') else 1)"; then \
            flake8 .; else echo "flake8 not installed"; fi

      - name: Unit tests (if pytest present)
        env:
          # Provide a safe default DB for CI (SQLite)
          DATABASE_URL: sqlite+aiosqlite:///./test.db
          # Any other env your app expects:
          OPENAI_API_KEY: "test"
        run: |
          if python -c "import pkgutil; exit(0 if pkgutil.find_loader('pytest') else 1)"; then \
            pytest -q || true; else echo "pytest not installed"; fi

  smoke:
    name: backend:smoke
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install requests
        run: pip install requests

      - name: Health/OpenAPI smoke
        env:
          BACKEND_URL: ${{ secrets.FRONTEND_BACKEND_URL }}
        run: |
          python - <<'PY'
          import os, requests, sys
          be = (os.environ.get("BACKEND_URL") or "").rstrip("/")
          if not be:
              print("No BACKEND_URL set; skipping smoke."); sys.exit(0)
          ok=1
          for path in ("/health", "/openapi.json"):
              try:
                  r = requests.get(be + path, timeout=20)
                  print(path, r.status_code)
                  if path=="/openapi.json":
                      ok &= r.ok and isinstance(r.json(), dict) and "paths" in r.json()
                  else:
                      ok &= r.ok
              except Exception as e:
                  print("ERR", path, e); ok=0
          sys.exit(0 if ok else 1)
          PY

  deploy-render:
    name: backend:deploy
    needs: [build-test, smoke]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && secrets.RENDER_API_KEY != '' && secrets.RENDER_SERVICE_ID != '' }}
    steps:
      - name: Trigger Render deploy
        run: |
          curl -fsS -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys
