name: Backend CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# allow the workflow to comment on PRs
permissions:
  contents: read
  pull-requests: write

jobs:
  lint-test-smoke:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest ruff httpx uvicorn requests

      - name: Lint (ruff)
        run: ruff check .

      - name: Run tests
        run: pytest -q

      - name: Smoke: boot API & hit /openapi.json
        run: |
          nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 >/tmp/api.log 2>&1 &
          for i in {1..30}; do
            curl -sf http://127.0.0.1:8000/openapi.json && break
            sleep 1
          done
          curl -sf http://127.0.0.1:8000/openapi.json | python - <<'PY'
          import sys, json
          info=json.load(sys.stdin).get("info",{})
          assert "title" in info, "Missing OpenAPI title"
          print(info["title"])
          PY

      # -------- Generate a ReleaseReport.md against prod env --------
      - name: Generate Release Report (remote)
        env:
          BACKEND_URL: https://wazifni-backend.onrender.com
          FRONTEND_URL: https://wazifni-frontend.vercel.app
          REPORT_EMAIL: ${{ secrets.REPORT_EMAIL }}
          REPORT_PASSWORD: ${{ secrets.REPORT_PASSWORD }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          python - <<'PY'
          import os, json, requests

          backend  = os.getenv("BACKEND_URL","").rstrip("/")
          frontend = os.getenv("FRONTEND_URL","").rstrip("/")
          email    = os.getenv("REPORT_EMAIL","")
          pwd      = os.getenv("REPORT_PASSWORD","")
          outpath  = os.path.join(os.getenv("GITHUB_WORKSPACE","."), "ReleaseReport.md")

          def req(m,u,**k):
            try:
              r = requests.request(m,u,timeout=20,**k); return r,None
            except Exception as e:
              return None,str(e)

          res = {}
          r,_ = req("GET", f"{backend}/openapi.json")
          res["openapi_status"] = r.status_code if r else None
          res["openapi_ok"]     = bool(r and r.ok and "paths" in r.json())

          h,_ = req("GET", f"{backend}/health")
          res["health_status"] = h.status_code if h else None
          res["health_ok"]     = bool(h and h.ok)

          token=None; jobs_status=None; jobs_count=None
          if email and pwd:
            req("POST", f"{backend}/auth/register", json={"email":email,"password":pwd,"name":"CI Bot"})
            lg,_ = req("POST", f"{backend}/auth/login", data={"username":email,"password":pwd})
            if lg and lg.ok:
              try: token = lg.json().get("access_token")
              except Exception: token=None
          if token:
            j,_ = req("GET", f"{backend}/jobs", headers={"Authorization":f"Bearer {token}"})
            jobs_status = j.status_code if j else None
            try: jobs_count = len(j.json()) if j and j.ok else None
            except Exception: jobs_count=None

          pre_ok=simple_ok=None; acao_pre=acao_simple=None
          if frontend:
            pre,_ = req("OPTIONS", f"{backend}/jobs",
                        headers={"Origin":frontend,"Access-Control-Request-Method":"GET"})
            if pre:
              acao_pre = pre.headers.get("Access-Control-Allow-Origin")
              pre_ok   = (acao_pre in (frontend, "*"))
            sim,_ = req("GET", f"{backend}/jobs", headers={"Origin":frontend})
            if sim:
              acao_simple = sim.headers.get("Access-Control-Allow-Origin")
              simple_ok   = (acao_simple in (frontend, "*"))

          go = all([
            res["openapi_ok"],
            res["health_ok"] if res["health_status"] is not None else True,
            (jobs_status==200) if jobs_status is not None else True,
            (pre_ok is None or pre_ok) and (simple_ok is None or simple_ok),
          ])

          report = f"""# Wazifni Release Report — CI Autogen

**Backend:** {backend}  
**Frontend:** {frontend or '(not set)'}  

## Verification Matrix
- OpenAPI: **{res['openapi_status']}** → OK: **{bool(res['openapi_ok'])}**
- Health: **{res['health_status']}** → OK: **{bool(res['health_ok'])}**
- Jobs: **{jobs_status}** (count: **{jobs_count}**)
- CORS preflight OK: **{pre_ok}** (ACAO: {acao_pre})
- CORS simple OK: **{simple_ok}** (ACAO: {acao_simple})

## Result
{"✅ GO — all checks passed." if go else "❌ NO-GO — see failures above."}
"""
          with open(outpath,"w",encoding="utf-8") as f:
            f.write(report)
          print(report)
          PY

      - name: Upload Release Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ReleaseReport
          path: ReleaseReport.md
          if-no-files-found: ignore

  build-and-deploy:
    needs: lint-test-smoke
    if: github.ref == 'refs/heads/main' && needs.lint-test-smoke.result == 'success'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.IMAGE_NAME }}:latest

      - name: Deploy via SSH (Docker)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            set -e
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${{ env.IMAGE_NAME }}:latest
            docker stop dataapps || true
            docker rm dataapps || true
            mkdir -p /opt/dataapps/data
            docker run -d --name dataapps \
              -p 8000:8000 \
              --env-file /opt/dataapps/.env \
              -v /opt/dataapps/data:/app/backend/app/data \
              ${{ env.IMAGE_NAME }}:latest

  comment-release-report:
    needs: lint-test-smoke
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Download ReleaseReport artifact
        uses: actions/download-artifact@v4
        with:
          name: ReleaseReport
          path: .

      - name: Post Release Report as PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: ReleaseReport.md
